groups = trt, circle = TRUE)
g
g <- ggbiplot(pca.results,
groups = trt, circle = TRUE)
g <- g + scale_color_discrete(name = '')
g
g <- ggbiplot(pca.results,
groups = trt, circle = TRUE)
g
?cor
?cor.test
temp = read.csv(file = "C:/Users/jaspkaur/Desktop/Book1.csv", header = T)
cor.test(temp)
x = cor.test(temp$diameter, temp$atemp)
x
install.packages("ANCOM")
library(ANCOM)
install.packages("ANCOM")
?model.matrix
?%in%
library(vegan)
library(reshape2)
library(phyloseq)
library(permute)
library(lattice)
library(vegan)
library(reshape2)
library(ggplot2)
library(car)
library(data.table)
library(scales)
library(plyr)
library(agricolae)
?nmds
citation()
library(gdata)
?install.packages
library(pbkrtest)
?PBmodcomp
library(parallel)
?makeCluster
library(readxl)
library(ggplot2)
library(pscl)
library(lme4)
library(dplyr)
library(pbkrtest)
?glmer
library(parallel)
?stopCluster
library(phyloseq)
library(ancom.R)
library(devtools)
install.packages("devtools")
source("https://bioconductor.org/biocLite.R")
biocLite("phyloseq")
install.packages("wmtsa")
install.packages("splus2R")
install.packages("ifultools")
install.packages("MASS")
install.packages("cluster")
install.packages("psych")
install.packages("vegan")
install.packages("biwavelet")
install.packages("devtools")
install.packages("digest")
install.packages("colorspace")
install.packages("aod")
install.packages("survey")
install.packages("scales")
install.packages("splancs")
install.packages("geoR")
install.packages("car")
install.packages("fBasics")
install.packages("timeDate")
install.packages("timeseries")
install.packages("RandomFields")
install.packages("gdata")
install.packages("deldir")
install.packages("agricolae")
install.packages("bitops")
install.packages("RCurl")
install.packages("jsonlite")
install.packages("jSonarR")
install.packages("RJSONIO")
install.packages("biom")
install.packages("dunn.test")
install.packages("permute")
install.packages("ggplot2")
install.packages("lattice")
install.packages("lavaan")
install.packages("semPlot")
install.packages("sjPlot")
install.packages("vtreat")
install.packages("tidyr")
install.packages("knitr")
install.packages("rmarkdown")
install.packages("randomForest")
install.packages("rpart")
install.packages("randomForest")
install.packages("rgl")
install.packages("nortest")
install.packages("lmtest")
install.packages("leaps")
install.packages("aplpack")
install.packages("Rcmdr")
install.packages("RVAideMemoire")
install.packages("ecodist")
install.packages("adespatial")
source("https://bioconductor.org/biocLite.R")
biocLite("phyloseq")
library(phyloseq)
library(ancom.R)
library(devtools)
library(decontam)
library(vegan)
devtools::install_github("benjjneb/decontam")
library(decontam)
library(vegan)
library(parallel)
detectCores()
install_github("GuillemSalazar/FastaUtils")
library(FastaUtils)
install_github("zdk123/SpiecEasi")
library(SpiecEasi)
library(igraph)
library(splitstackshape)
library(plyr)
install.packages("splitstackshape")
library(splitstackshape)
library(adespatial)
install.packages("doParallel")
install.packages("DT")
install.packages("exactRankTests")
install.packages("foreach")
install.packages("ggplot2")
install.packages(“Rcpp”)
install.packages("shiny")
install.packages("foreach")
install.packages("foreach")
install.packages("ggplot2")
install.packages("Rcpp")
install.packages("shiny")
download.file("https://www.niehs.nih.gov/research/resources/software/biostatistics/ancom/ancom_software.zip",destfile = "ANCOM.zip")
library(decontam)
isContaminant()
?isContaminant
library(devtools)
?isContaminant
isContaminant
cite(adespatial)
cite(vegan)
citation("adespatial")
library(phyloseq)
library(reshape2)
library(readxl)
library(devtools)
#devtools::install_github("benjjneb/decontam")
library(decontam)
library(vegan)
library(dendextend)
library(ggdendro)
library(VennDiagram)
library(stringr)
library(ggplot2)
library(RColorBrewer)
library(scales)
library(dplyr)
library(geosphere)
install.packages("BiocManager")
BiocManager::install(c("phyloseq", "reshape2", "readxl", "decontam", "vegan", "dendextend","ggdendro", "VennDiagram", "stringr", "ggplot", "RColorBrewer", "scales", "dplyr", "tidyverse", "geosphere"))
library(phyloseq)
library(reshape2)
library(readxl)
library(devtools)
#devtools::install_github("benjjneb/decontam")
library(decontam)
library(vegan)
library(dendextend)
library(ggdendro)
library(VennDiagram)
library(stringr)
library(ggplot2)
library(RColorBrewer)
library(scales)
library(dplyr)
library(geosphere)
install.packages("venn")
library(venn)
install.packages("parzer")
install.packages("map")
library(map)
install.packages("maps")
install.packages("ggmap")
Sys.which("make")
install.packages("remotes")
remotes::install_github("stefpeschel/NetCoMi")
BiocManager::install("NetCoMi")
devtools::install_github("SpiecEasi")
devtools::install_github("zdk123/SpiecEasi")
devtools::install_github("zdk123/SpiecEasi", force = TRUE)
library(SpiecEasi)
devtools::install_github("stefpeschel/NetCoMi", dependencies = TRUE,
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
library(NetCoMi)
install.packages("microbiomeSeq")
library(microbiomeSeq)
BiocManager::install("microbiomeSeq")
install_github("umerijaz/microbiomeSeq")
library(devtools) # Load the devtools package
install_github("umerijaz/microbiomeSeq") # Install the package
library(microbiomeSeq)  #load the pack
library(BiocManager)
BiocManager::install(c("phyloseq", "reshape2", "readxl", "devtools", "decontam", "vegan", "dendextend", "ggdendro"))
library(phyloseq)
library(reshape2)
library(readxl)
library(devtools)
#devtools::install_github("benjjneb/decontam")
library(decontam)
library(vegan)
library(dendextend)
library(ggdendro)
library(lme4)
library(glmmTMB)
library(mixedup)
data(sleepstudy)
head(sleepstudy)
dput()
?dput
dput(sleepstudy)
tmb_model <- glmmTMB(Reaction ~ Days + (1 | Subject), data = sleepstudy)
dput(summary(tmb_model))
extract_random_effects(tmb_model)
dput(extract_random_effects(tmb_model))
x = dput(extract_random_effects(tmb_model))
x
y = structure(list(group_var = c("Subject", "Subject", "Subject",
"Subject", "Subject", "Subject", "Subject", "Subject", "Subject",
"Subject", "Subject", "Subject", "Subject", "Subject", "Subject",
"Subject", "Subject", "Subject"), effect = c("Intercept", "Intercept",
"Intercept", "Intercept", "Intercept", "Intercept", "Intercept",
"Intercept", "Intercept", "Intercept", "Intercept", "Intercept",
"Intercept", "Intercept", "Intercept", "Intercept", "Intercept",
"Intercept"), group = structure(c(17L, 1L, 2L, 9L, 12L, 11L,
14L, 8L, 3L, 18L, 4L, 13L, 5L, 16L, 10L, 6L, 7L, 15L), .Label = c("309",
"310", "335", "349", "351", "370", "371", "334", "330", "369",
"332", "331", "350", "333", "372", "352", "308", "337"), class = "factor"),
value = c(40.635, -77.566, -62.879, 4.39, 10.179, 8.191,
16.44, -2.986, -45.117, 71.92, -21.119, 14.06, -7.834, 36.246,
7.011, -6.34, -3.282, 18.05), se = c(12.535, 12.651, 12.596,
12.491, 12.493, 12.492, 12.498, 12.491, 12.545, 12.628, 12.503,
12.496, 12.492, 12.526, 12.492, 12.492, 12.491, 12.499),
lower_2.5 = c(16.067, -102.361, -87.567, -20.092, -14.308,
-16.294, -8.055, -27.468, -69.705, 47.168, -45.624, -10.432,
-32.318, 11.696, -17.473, -30.823, -27.764, -6.449), upper_97.5 = c(65.203,
-52.771, -38.191, 28.873, 34.666, 32.676, 40.936, 21.496,
-20.529, 96.671, 3.386, 38.552, 16.651, 60.796, 31.495, 18.144,
21.2, 42.548)), row.names = c(NA, -18L), class = c("tbl_df",
"tbl", "data.frame"))
y
library(phyloseq)
library(reshape2)
library(readxl)
library(devtools)
#devtools::install_github("benjjneb/decontam")
library(decontam)
library(vegan)
library(dendextend)
library(ggdendro)
library(VennDiagram)
library(stringr)
library(ggplot2)
library(RColorBrewer)
library(scales)
library(dplyr)
library(geosphere)
library(tidyr)
#devtools::install_github("fkeck/phylosignal")
library(phylosignal)
library(ape)
library(phylobase)
#devtools::install_github("vmikk/metagMisc")
library("metagMisc")
library(adegenet)
library(phangorn)
library(ggtree)
data(carni19)
View(carni19)
dat <- list()
dat$mass <- carni19$bm
dat$random <- rnorm(19, sd = 10)
dat$bm <- rTraitCont(tre)
dat <- as.data.frame(dat)
View(dat)
setwd("G://My Drive//my_folder/db_pico/pico_growth/")
library(readxl)
library(dplyr)
library(glmmTMB)
library(DHARMa)
library(ggplot2)
library(mixedup)
# Pico growth data --------------------------------------------------------
growth_raw = read_excel("data/pico_growth_met.xlsx", sheet = 1, na = "?")
###filter the dataset  comprising of 100 plants----------------------
growth_raw = subset(growth_raw, plant_set == "b")
###summarize data for each plant by year and calculate leaf area
growth = growth_raw %>%
group_by(year, plant_no) %>%
summarise(nol = sum(leaf_no, na.rm = TRUE),
all = mean(leaf_len, na.rm = TRUE),
alw = mean(leaf_wid, na.rm = TRUE),
la = sum(3.14*(leaf_len/2)*(leaf_wid/2), na.rm = TRUE), ##leaf area for ellipitical leafs
inf = sum(inf_init, na.rm = TRUE),
infl = sum(inf_len, na.rm = TRUE),
infw = sum(inf_wid, na.rm = TRUE),
herb = sum(herb, na.rm = TRUE))
growth
growth$year = as.factor(growth$year)
growth$inf = as.factor(growth$inf)
growth2 = growth %>% group_by(year) %>% mutate(new = ifelse(year == 2017, infl - 1.5, infl)) %>%
mutate(new = ifelse(year == 2018, infl - 0, new))%>%
mutate(new = ifelse(year == 2019, infl - 0.927, new))%>%
mutate(new = ifelse(year == 2020, infl + 1.32, new))%>%
mutate(new = ifelse(year == 2021, infl + 0.561, new))%>%
mutate(new = ifelse(year == 2022, infl + 0.439, new))
growth2$infl = growth2$new
growth2$infl = ifelse(growth2$infl < 0, as.numeric(paste(0)), growth2$infl)
write.csv(growth2, "x.csv")
growth2 = read_excel("data/pico_growth_met.xlsx", sheet = 3, na = "NA")
###crossed mixed model showing the effect of vegetative fitness on next year's vegetative fitness
q2glm1 = glmmTMB(la2 ~ la + (1 | year) + (1 | plant_no),
family = tweedie(link = "log"),
ziformula = ~ la + year + plant_no,
data = growth2)
summary(q2glm1)
q1glm1 = glmmTMB(infl ~ la + (1 | year) + (1 | plant_no),
family = tweedie(link = "log"), ##other option is to use ziGamma family here
ziformula = ~ la + year + plant_no,
data = growth)
summary(q1glm1)
simulationOutput <- simulateResiduals(fittedModel = q1glm1, plot = F)
plot(simulationOutput)
testZeroInflation(simulationOutput)
?testZeroInflation
x = testZeroInflation(simulationOutput)
x
q1glm1 = glmmTMB(infl ~ la + (1 | year) + (1 | plant_no),
family = tweedie(link = "log"), ##other option is to use ziGamma family here
data = growth)
summary(q1glm1)
q1glm1 = glmmTMB(infl ~ la + (1 | year) + (1 | plant_no),
family = tweedie(link = "log"), ##other option is to use ziGamma family here
ziformula = ~ la + year + plant_no,
data = growth)
summary(q1glm1)
q1glm2 = glmmTMB(infl ~ la + (1 | year) + (1 | plant_no),
family = tweedie(link = "log"), ##other option is to use ziGamma family here
data = growth)
summary(q1glm2)
AIC(q1glm1, q1glm2)
testOverdispersion(simulationOutput)
testdispersion(simulationOutput)
testDispersion(simulationOutput)
simulationOutput2 <- simulateResiduals(fittedModel = q1glm2, plot = F)
plot(simulationOutput2)
q1glm3 = glmmTMB(infl ~ la + (1 | year) + (1 | plant_no),
family = tweedie(link = "log"), ##other option is to use ziGamma family here
ziformula = ~ la,
data = growth)
summary(q1glm3)
simulationOutput3 <- simulateResiduals(fittedModel = q1glm3, plot = F)
plot(simulationOutput3)
AIC(q1glm1, q1glm2, q1glm3)
q1glm4 = glmmTMB(infl ~ la,
family = tweedie(link = "log"), ##other option is to use ziGamma family here
ziformula = ~ la,
data = growth)
summary(q1glm4)
simulationOutput4 <- simulateResiduals(fittedModel = q1glm4, plot = F)
plot(simulationOutput4)
AIC(q1glm1, q1glm2, q1glm3, q1glm4)
q1glm5 = glmmTMB(infl ~ (1 | year) + (1 | plant_no),
family = tweedie(link = "log"), ##other option is to use ziGamma family here
ziformula = ~ year + plant_no,
data = growth)
summary(q1glm5)
AIC(q1glm1, q1glm2, q1glm3, q1glm4, q1glm5)
summary(q1glm1)
q1glm1 = glmmTMB(infl ~ la + (1 | year) + (1 | plant_no),
family = tweedie(link = "log"), ##other option is to use ziGamma family here
ziformula = ~ la + year + plant_no,
data = growth)
summary(q1glm1)
simulationOutput <- simulateResiduals(fittedModel = q1glm1, plot = F)
plot(simulationOutput)
q1glm2 = glmmTMB(infl ~ la + (1 | year),
family = tweedie(link = "log"), ##other option is to use ziGamma family here
ziformula = ~ la + year,
data = growth)
summary(q1glm2)
AIC(q1glm1, q1glm2)
q1glm2 = glmmTMB(infl ~ la + (1 | year) + (1 | plant_no),
family = tweedie(link = "log"), ##other option is to use ziGamma family here
ziformula = ~ la + year,
data = growth)
summary(q1glm2)
AIC(q1glm1, q1glm2)
q1glm2 = glmmTMB(infl ~ la + (1 | year),
family = tweedie(link = "log"), ##other option is to use ziGamma family here
ziformula = ~ la + year,
data = growth)
summary(q1glm2)
AIC(q1glm1, q1glm2)
summary(q1glm1)
simulationOutput2 <- simulateResiduals(fittedModel = q1glm2, plot = F)
plot(simulationOutput2)
extract_random_effects(q1glm1)
growth2 = read_excel("data/pico_growth_met.xlsx", sheet = 3, na = "NA")
q2glm1 = glmmTMB(la2 ~ la + (1 | year) + (1 | plant_no),
family = tweedie(link = "log"),
ziformula = ~ la + year,
data = growth2)
summary(q2glm1)
q2glm2 <- glmmTMB(infl2 ~ la + (1 | year) + (1 | plant_no),
family = tweedie(link = "log"),
ziformula = ~ la + year,
data = growth2)
summary(q2glm2)
q3glm1 <- glmmTMB(infl2 ~ infl + (1 | year) + (1 | plant_no),
family = tweedie(link = "log"),
ziformula = ~ infl + year + plant_no,
data = growth2)
summary(q3glm1)
q3glm1 <- glmmTMB(infl2 ~ infl + (1 | year) + (1 | plant_no),
family = tweedie(link = "log"),
ziformula = ~ infl + year,
data = growth2)
summary(q3glm1)
q3glm2 <- glmmTMB(la2 ~ infl + (1 | year) + (1 | plant_no),
family = tweedie(link = "log"),
ziformula = ~ infl + year,
data = growth2)
summary(q3glm2)
q4glm1 <- glmmTMB(la2 ~ herb + (1 | year) + (1 | plant_no),
family = tweedie(link = "log"),
ziformula = ~ herb + year,
data = growth2)
summary(q4glm1)
q4glm1 <- glmmTMB(infl2 ~ herb + (1 | year) + (1 | plant_no),
family = tweedie(link = "log"),
ziformula = ~ herb + year,
data = growth2)
summary(q4glm1)
q2glm2 <- glmmTMB(infl2 ~ la + (1 | year) + (1 | plant_no),
family = tweedie(link = "log"),
ziformula = ~ la + year,
data = growth2)
summary(q2glm2)
q0glm = glmmTMB(la ~ infl + (1 | plant_no),
family = tweedie(link = "log"), ##other option is to use ziGamma family here
ziformula = ~ la + plant_no,
data = growth)
summary(q0glm)
q0glm = glmmTMB(la ~ infl + (1 | year) + (1 | plant_no),
family = tweedie(link = "log"),
ziformula = ~ la + plant_no,
data = growth)
summary(q0glm)
q0glm = glmmTMB(la ~ infl + (1 | year) + (1 | plant_no),
family = tweedie(link = "log"),
ziformula = ~ la + year,
data = growth)
summary(q0glm)
q0glm = glmmTMB(la ~ infl + (1 | year) + (1 | plant_no),
family = tweedie(link = "log"),
ziformula = ~ infl + year,
data = growth)
summary(q0glm)
extract_random_effects(q0glm)
q0glm = glmmTMB(la ~ + (1 | year) + (1 | plant_no),
family = tweedie(link = "log"),
ziformula = ~ year,
data = growth)
summary(q0glm)
extract_random_effects(q0glm)
q2glm1 = glmmTMB(la2 ~ la + (1 | year) + (1 | plant_no),
family = tweedie(link = "log"),
ziformula = ~ la + year,
data = growth2)
summary(q2glm1)
q2glm2 = glmmTMB(la2 ~ la + (1 | year) + (1 | plant_no),
family = tweedie(link = "log"),
data = growth2)
summary(q2glm2)
AIC(q2glm1, q2glm2)
q0glm = glmmTMB(la ~ (1 | year) + (1 | plant_no),
family = tweedie(link = "log"),
ziformula = ~ year,
data = growth)
summary(q0glm)
extract_random_effects(q0glm)
growth2 = growth %>% group_by(year) %>% mutate(new = ifelse(year == 2017, la - 0.698, la)) %>%
mutate(new = ifelse(year == 2018, la + 1.32, new))%>%
mutate(new = ifelse(year == 2019, la - 0.251, new))%>%
mutate(new = ifelse(year == 2020, la - 0.667, new))%>%
mutate(new = ifelse(year == 2021, la + 0.171, new))%>%
mutate(new = ifelse(year == 2022, la + 0.01, new))
growth2$la = growth2$new
growth2$la = ifelse(growth2$la < 0, as.numeric(paste(0)), growth2$la)
write.csv(growth2, "x.csv")
